/*
 * Copyright 2005-2010 NVIDIA Corporation.  All rights reserved.
 */

/*

  This program is free software; you can redistribute it and/or modify it
  under the terms of version 2 of the GNU General Public License as
  published by the Free Software Foundation.

  This program is distributed in the hope that it would be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

  Further, this software is distributed without any warranty that it is
  free of the rightful claim of any third person regarding infringement 
  or the like.  Any license provided herein, whether implied or 
  otherwise, applies only to this software file.  Patent licenses, if 
  any, provided herein do not apply to combinations of this program with 
  other software, or any other product whatsoever.  

  You should have received a copy of the GNU General Public License along
  with this program; if not, write the Free Software Foundation, Inc., 59
  Temple Place - Suite 330, Boston MA 02111-1307, USA.

*/

//
// Generate an ISA containing the instructions specified.
/////////////////////////////////////////////////////////
// The instructions are listed by category. The different categories of
// instructions are:
//
//   1. Integer instructions
//   2. FP instructions
//   3. Simulated instructions
//   4. Dummy instructions
//
// Within each category, the instructions are in alphabetical order.
// This arrangement of instructions matches the order in the ISA manual.
/////////////////////////////////////
//
//  $Revision: 1.25 $
//  $Date: 2001/03/10 01:16:13 $
//  $Author: mtibuild $
//  $Source: /osprey.src/osprey1.0/common/targ_info/isa/ia64/RCS/isa.cxx,v $

#include <stddef.h>
#include "isa_gen.h"

int main ()
{
  // Normally would put type info in an enum on the base instruction,
  // but for nvisa the type info affects the operand sizes (cause multiple
  // register sizes), so need it in base instruction.
  // 
  // Will only define simple variants of instructions that we will use;
  // e.g. ignore predication except for branches.
  //
  // Note that some of the expansion routines rely on the order of the types 
  // within an opcode, so be careful to keep them grouped together.
  ISA_Create ("nvisa", 
	"add.s8",
	"add.s16",
	"add.s32",
	"add.s64",
	"add.u8",
	"add.u16",
	"add.u32",
	"add.u64",
	"add<fround><ftz><sat>f32",
	"add.f64",
	"add.s8_lit",
	"add.s16_lit",
	"add.s32_lit",
	"add.s64_lit",
	"add.u8_lit",
	"add.u16_lit",
	"add.u32_lit",
	"add.u64_lit",
	"add.rn.f64",
	"add.rz.f64",
	"add.rm.f64",
	"add.rp.f64",
	"sub.s8",
	"sub.s16",
	"sub.s32",
	"sub.s64",
	"sub.u8",
	"sub.u16",
	"sub.u32",
	"sub.u64",
	"sub<fround><ftz><sat>f32",
	"sub.f64",
	"sub.s8_lit",
	"sub.s16_lit",
	"sub.s32_lit",
	"sub.s64_lit",
	"sub.u8_lit",
	"sub.u16_lit",
	"sub.u32_lit",
	"sub.u64_lit",
	"sub.s32_p",      
	"sub.s64_p",
	"sub.s32_np",
	"sub.s64_np",
	"mul.lo.s8",
	"mul.lo.s16",
	"mul.lo.s32",
	"mul.lo.s64",
	"mul.lo.u8",
	"mul.lo.u16",
	"mul.lo.u32",
	"mul.lo.u64",
	"mul.hi.s8",
	"mul.hi.s16",
	"mul.hi.s32",
	"mul.hi.s64",
	"mul.hi.u8",
	"mul.hi.u16",
	"mul.hi.u32",
	"mul.hi.u64",
	"mul.lo.s8_lit",
	"mul.lo.s16_lit",
	"mul.lo.s32_lit",
	"mul.lo.s64_lit",
	"mul.lo.u8_lit",
	"mul.lo.u16_lit",
	"mul.lo.u32_lit",
	"mul.lo.u64_lit",
	"mul.wide.s16",
	"mul.wide.s32",
	"mul.wide.u16",
	"mul.wide.u32",
	"mul.wide.s16_lit",
	"mul.wide.s32_lit",
	"mul.wide.u16_lit",
	"mul.wide.u32_lit",
	"mul24.lo.s32",
	"mul24.lo.u32",
	"mul24.lo.s32_lit",
	"mul24.lo.u32_lit",
	"mul<fround><ftz><sat>f32",
	"mul.f64",
	"mul.rn.f64",
	"mul.rz.f64",
	"mul.rm.f64",
	"mul.rp.f64",
	"div.rz.f64",
	"div.rm.f64",
	"div.rp.f64",
	"rcp.rz.f64",
	"rcp.rm.f64",
	"rcp.rp.f64",
        "rcp.approx.ftz.f64",
	"sqrt.rz.f64",
	"sqrt.rm.f64",
	"sqrt.rp.f64",
	"mad.lo.s8",
	"mad.lo.s16",
	"mad.lo.s32",
	"mad.lo.s64",
	"mad.lo.u8",
	"mad.lo.u16",
	"mad.lo.u32",
	"mad.lo.u64",
	"mad.hi.s8",
	"mad.hi.s16",
	"mad.hi.s32",
	"mad.hi.s64",
	"mad.hi.u8",
	"mad.hi.u16",
	"mad.hi.u32",
	"mad.hi.u64",
	"mad.wide.s16",
	"mad.wide.u16",
	"mad.wide.s32",
	"mad.wide.u32",
	"mad24.lo.s32",
	"mad24.lo.u32",
	"mad.f32",
	"mad.f64",
	"mad.rn.f64",
	"mad.rz.f64",
	"mad.rm.f64",
	"mad.rp.f64",
	"fma<fround><ftz><sat>f32",
	"fma<fround>f64",
	"div.s8",
	"div.s16",
	"div.s32",
	"div.s64",
	"div.u8",
	"div.u16",
	"div.u32",
	"div.u64",
	"div<fround><ftz>f32",
	"div.f64",
	"div.rn.f64",
	"div.s8_lit",
	"div.s16_lit",
	"div.s32_lit",
	"div.s64_lit",
	"div.u8_lit",
	"div.u16_lit",
	"div.u32_lit",
	"div.u64_lit",
	"rem.s8",
	"rem.s16",
	"rem.s32",
	"rem.s64",
	"rem.u8",
	"rem.u16",
	"rem.u32",
	"rem.u64",
	"rem.s8_lit",
	"rem.s16_lit",
	"rem.s32_lit",
	"rem.s64_lit",
	"rem.u8_lit",
	"rem.u16_lit",
	"rem.u32_lit",
	"rem.u64_lit",
	"abs.s8",
	"abs.s16",
	"abs.s32",
	"abs.s64",
	"abs.u8",
	"abs.u16",
	"abs.u32",
	"abs.u64",
	"abs<ftz>f32",
	"abs.f64",
	"min.s8",
	"min.s16",
	"min.s32",
	"min.s64",
	"min.u8",
	"min.u16",
	"min.u32",
	"min.u64",
	"min<ftz>f32",
	"min.f64",
	"max.s8",
	"max.s16",
	"max.s32",
	"max.s64",
	"max.u8",
	"max.u16",
	"max.u32",
	"max.u64",
	"max<ftz>f32",
	"max.f64",
	"set<cmp>u16.s8",
	"set<cmp>u16.s16",
	"set<cmp>u16.s32",
	"set<cmp>u16.s64",
	"set<cmp>u16.u8",
	"set<cmp>u16.u16",
	"set<cmp>u16.u32",
	"set<cmp>u16.u64",
	"set<cmp><ftz>u16.f32",
	"set<cmp>u16.f64",
	"set<cmp>u32.s8",
	"set<cmp>u32.s16",
	"set<cmp>u32.s32",
	"set<cmp>u32.s64",
	"set<cmp>u32.u8",
	"set<cmp>u32.u16",
	"set<cmp>u32.u32",
	"set<cmp>u32.u64",
	"set<cmp><ftz>u32.f32",
	"set<cmp>u32.f64",
	"set<cmp><boolop>u16.s16_lit",
	"set<cmp><boolop>u16.s32_lit",
	"set<cmp><boolop>u16.u16_lit",
	"set<cmp><boolop>u16.u32_lit",
	"set<cmp><boolop>u32.s16_lit",
	"set<cmp><boolop>u32.s32_lit",
	"set<cmp><boolop>u32.u16_lit",
	"set<cmp><boolop>u32.u32_lit",
	"setp<cmp>s8",
	"setp<cmp>s16",
	"setp<cmp>s32",
	"setp<cmp>s64",
	"setp<cmp>u8",
	"setp<cmp>u16",
	"setp<cmp>u32",
	"setp<cmp>u64",
	"setp<cmp><ftz>f32",
	"setp<cmp>f64",
	"setp.eq.u32_p",
	"setp.ne.u32_p",
	"setp<cmp><boolop>u32_lit",
	"slct.s8.s32",
	"slct.s16.s32",
	"slct.s32.s32",
	"slct.s64.s32",
	"slct.u8.s32",
	"slct.u16.s32",
	"slct.u32.s32",
	"slct.u64.s32",
	"slct.f32.s32",
	"slct.f64.s32",
	"slct<ftz>s8.f32",
	"slct<ftz>s16.f32",
	"slct<ftz>s32.f32",
	"slct<ftz>s64.f32",
	"slct<ftz>u8.f32",
	"slct<ftz>u16.f32",
	"slct<ftz>u32.f32",
	"slct<ftz>u64.f32",
	"slct<ftz>f32.f32",
	"slct<ftz>f64.f32",
	"selp.s8",
	"selp.s16",
	"selp.s32",
	"selp.s64",
	"selp.u8",
	"selp.u16",
	"selp.u32",
	"selp.u64",
	"selp.f32",
	"selp.f64",
	"selp.s8_lit",
	"selp.s16_lit",
	"selp.s32_lit",
	"selp.s64_lit",
	"selp.u8_lit",
	"selp.u16_lit",
	"selp.u32_lit",
	"selp.u64_lit",
	"selp.f32_lit",
	"selp.f64_lit",
	"sin<fround><ftz>f32",
	"sin.f64",
	"cos<fround><ftz>f32",
	"cos.f64",
	"lg2<fround><ftz>f32",
	"lg2.f64",
	"ex2<fround><ftz>f32",
	"ex2.f64",
	"rcp<fround><ftz>f32",
	"rcp.f64",
	"rcp.rn.f64",
	"sqrt<fround><ftz>f32",
	"sqrt.f64",
	"sqrt.rn.f64",
	"rsqrt<fround><ftz>f32",
	"rsqrt<fround>f64",
	"and.pred",
	"and.b8",
	"and.b16",
	"and.b32",
	"and.b64",
	"and.b8_lit",
	"and.b16_lit",
	"and.b32_lit",
	"and.b64_lit",
	"or.pred",
	"or.b8",
	"or.b16",
	"or.b32",
	"or.b64",
	"or.b8_lit",
	"or.b16_lit",
	"or.b32_lit",
	"or.b64_lit",
	"not.pred",
	"not.b8",
	"not.b16",
	"not.b32",
	"not.b64",
	"cnot.b8",
	"cnot.b16",
	"cnot.b32",
	"cnot.b64",
	"xor.pred",
	"xor.b8",
	"xor.b16",
	"xor.b32",
	"xor.b64",
	"xor.b8_lit",
	"xor.b16_lit",
	"xor.b32_lit",
	"xor.b64_lit",
	"neg.s8",
	"neg.s16",
	"neg.s32",
	"neg.s64",
	"neg.u8",
	"neg.u16",
	"neg.u32",
	"neg.u64",
	"neg<ftz>f32",
	"neg.f64",
	"brev.b32",
	"brev.b64",
	"shl.b8",
	"shl.b16",
	"shl.b32",
	"shl.b64",
	"shr.s8",
	"shr.s16",
	"shr.s32",
	"shr.s64",
	"shr.u8",
	"shr.u16",
	"shr.u32",
	"shr.u64",
	"shl.b8_lit",
	"shl.b16_lit",
	"shl.b32_lit",
	"shl.b64_lit",
	"shr.s8_lit",
	"shr.s16_lit",
	"shr.s32_lit",
	"shr.s64_lit",
	"shr.u8_lit",
	"shr.u16_lit",
	"shr.u32_lit",
	"shr.u64_lit",
	"shl.b8_lit1",
	"shl.b16_lit1",
	"shl.b32_lit1",
	"shl.b64_lit1",
	"shr.s8_lit1",
	"shr.s16_lit1",
	"shr.s32_lit1",
	"shr.s64_lit1",
	"shr.u8_lit1",
	"shr.u16_lit1",
	"shr.u32_lit1",
	"shr.u64_lit1",
	"mov.pred",
	"mov.s8",
	"mov.s16",
	"mov.s32",
	"mov.s64",
	"mov.u8",
	"mov.u16",
	"mov.u32",
	"mov.u64",
	"mov.f32",
	"mov.f64",
	"mov.b32_i2f",
	"mov.b32_f2i",
	"mov.b64_i2f",
	"mov.b64_f2i",
	"mov.s8_lit",
	"mov.s16_lit",
	"mov.s32_lit",
	"mov.s64_lit",
	"mov.u8_lit",
	"mov.u16_lit",
	"mov.u32_lit",
	"mov.u64_lit",
	"mov.f32_lit",
	"mov.f64_lit",
	"mov.u32_a",
	"mov.u32_ao",
	"mov.u64_a",
	"mov.u64_ao",
	"mov.b64_i22f",
	"mov.b64_f2i2",
	// ld sym
	"ld<qualifier><space>s8",
	"ld<qualifier><space>s16",
	"ld<qualifier><space>s32",
	"ld<qualifier><space>s64",
	"ld<qualifier><space>u8",
	"ld<qualifier><space>u16",
	"ld<qualifier><space>u32",
	"ld<qualifier><space>u64",
	"ld<qualifier><space>f32",
	"ld<qualifier><space>f64",
	// ld sym[offset]
	"ld<qualifier><space>s8_o",
	"ld<qualifier><space>s16_o",
	"ld<qualifier><space>s32_o",
	"ld<qualifier><space>s64_o",
	"ld<qualifier><space>u8_o",
	"ld<qualifier><space>u16_o",
	"ld<qualifier><space>u32_o",
	"ld<qualifier><space>u64_o",
	"ld<qualifier><space>f32_o",
	"ld<qualifier><space>f64_o",
	// ld [reg+offset]
	"ld<qualifier><space>s8_r",
	"ld<qualifier><space>s16_r",
	"ld<qualifier><space>s32_r",
	"ld<qualifier><space>s64_r",
	"ld<qualifier><space>u8_r",
	"ld<qualifier><space>u16_r",
	"ld<qualifier><space>u32_r",
	"ld<qualifier><space>u64_r",
	"ld<qualifier><space>f32_r",
	"ld<qualifier><space>f64_r",
	// ld small value into 32bit reg
	"ld<qualifier><space>s8_b32",
	"ld<qualifier><space>s16_b32",
	"ld<qualifier><space>u8_b32",
	"ld<qualifier><space>u16_b32",
	"ld<qualifier><space>s8_b32_o",
	"ld<qualifier><space>s16_b32_o",
	"ld<qualifier><space>u8_b32_o",
	"ld<qualifier><space>u16_b32_o",
	"ld<qualifier><space>s8_b32_r",
	"ld<qualifier><space>s16_b32_r",
	"ld<qualifier><space>u8_b32_r",
	"ld<qualifier><space>u16_b32_r",
	// 64bit address versions
	"ld<qualifier><space>s8_a64",
	"ld<qualifier><space>s16_a64",
	"ld<qualifier><space>s32_a64",
	"ld<qualifier><space>s64_a64",
	"ld<qualifier><space>u8_a64",
	"ld<qualifier><space>u16_a64",
	"ld<qualifier><space>u32_a64",
	"ld<qualifier><space>u64_a64",
	"ld<qualifier><space>f32_a64",
	"ld<qualifier><space>f64_a64",
	"ld<qualifier><space>s8_a64_o",
	"ld<qualifier><space>s16_a64_o",
	"ld<qualifier><space>s32_a64_o",
	"ld<qualifier><space>s64_a64_o",
	"ld<qualifier><space>u8_a64_o",
	"ld<qualifier><space>u16_a64_o",
	"ld<qualifier><space>u32_a64_o",
	"ld<qualifier><space>u64_a64_o",
	"ld<qualifier><space>f32_a64_o",
	"ld<qualifier><space>f64_a64_o",
	"ld<qualifier><space>s8_a64_r",
	"ld<qualifier><space>s16_a64_r",
	"ld<qualifier><space>s32_a64_r",
	"ld<qualifier><space>s64_a64_r",
	"ld<qualifier><space>u8_a64_r",
	"ld<qualifier><space>u16_a64_r",
	"ld<qualifier><space>u32_a64_r",
	"ld<qualifier><space>u64_a64_r",
	"ld<qualifier><space>f32_a64_r",
	"ld<qualifier><space>f64_a64_r",
	"ld<qualifier><space>s8_b32_a64",
	"ld<qualifier><space>s16_b32_a64",
	"ld<qualifier><space>u8_b32_a64",
	"ld<qualifier><space>u16_b32_a64",
	"ld<qualifier><space>s8_b32_a64_o",
	"ld<qualifier><space>s16_b32_a64_o",
	"ld<qualifier><space>u8_b32_a64_o",
	"ld<qualifier><space>u16_b32_a64_o",
	"ld<qualifier><space>s8_b32_a64_r",
	"ld<qualifier><space>s16_b32_a64_r",
	"ld<qualifier><space>u8_b32_a64_r",
	"ld<qualifier><space>u16_b32_a64_r",
	// for vector loads
	"ld<qualifier><space>v2.s8_r",
	"ld<qualifier><space>v4.s8_r",
	"ld<qualifier><space>v2.s8_b32_r",
	"ld<qualifier><space>v4.s8_b32_r",
	"ld<qualifier><space>v2.s16_r",
	"ld<qualifier><space>v4.s16_r",
	"ld<qualifier><space>v2.s16_b32_r",
	"ld<qualifier><space>v4.s16_b32_r",
	"ld<qualifier><space>v2.s32_r",
	"ld<qualifier><space>v4.s32_r",
	"ld<qualifier><space>v2.s64_r",
	"ld<qualifier><space>v2.u8_r",
	"ld<qualifier><space>v4.u8_r",
	"ld<qualifier><space>v2.u8_b32_r",
	"ld<qualifier><space>v4.u8_b32_r",
	"ld<qualifier><space>v2.u16_r",
	"ld<qualifier><space>v4.u16_r",
	"ld<qualifier><space>v2.u16_b32_r",
	"ld<qualifier><space>v4.u16_b32_r",
	"ld<qualifier><space>v2.u32_r",
	"ld<qualifier><space>v4.u32_r",
	"ld<qualifier><space>v2.u64_r",
	"ld<qualifier><space>v2.f32_r",
	"ld<qualifier><space>v4.f32_r",
	"ld<qualifier><space>v2.f64_r",
	"ld<qualifier><space>v2.s8_a64_r",
	"ld<qualifier><space>v4.s8_a64_r",
	"ld<qualifier><space>v2.s8_b32_a64_r",
	"ld<qualifier><space>v4.s8_b32_a64_r",
	"ld<qualifier><space>v2.s16_a64_r",
	"ld<qualifier><space>v4.s16_a64_r",
	"ld<qualifier><space>v2.s16_b32_a64_r",
	"ld<qualifier><space>v4.s16_b32_a64_r",
	"ld<qualifier><space>v2.s32_a64_r",
	"ld<qualifier><space>v4.s32_a64_r",
	"ld<qualifier><space>v2.s64_a64_r",
	"ld<qualifier><space>v2.u8_a64_r",
	"ld<qualifier><space>v4.u8_a64_r",
	"ld<qualifier><space>v2.u8_b32_a64_r",
	"ld<qualifier><space>v4.u8_b32_a64_r",
	"ld<qualifier><space>v2.u16_a64_r",
	"ld<qualifier><space>v4.u16_a64_r",
	"ld<qualifier><space>v2.u16_b32_a64_r",
	"ld<qualifier><space>v4.u16_b32_a64_r",
	"ld<qualifier><space>v2.u32_a64_r",
	"ld<qualifier><space>v4.u32_a64_r",
	"ld<qualifier><space>v2.u64_a64_r",
	"ld<qualifier><space>v2.f32_a64_r",
	"ld<qualifier><space>v4.f32_a64_r",
	"ld<qualifier><space>v2.f64_a64_r",
	"ld<qualifier><space>v2.s8_o",
	"ld<qualifier><space>v4.s8_o",
	"ld<qualifier><space>v2.s8_b32_o",
	"ld<qualifier><space>v4.s8_b32_o",
	"ld<qualifier><space>v2.s16_o",
	"ld<qualifier><space>v4.s16_o",
	"ld<qualifier><space>v2.s16_b32_o",
	"ld<qualifier><space>v4.s16_b32_o",
	"ld<qualifier><space>v2.s32_o",
	"ld<qualifier><space>v4.s32_o",
	"ld<qualifier><space>v2.s64_o",
	"ld<qualifier><space>v2.u8_o",
	"ld<qualifier><space>v4.u8_o",
	"ld<qualifier><space>v2.u8_b32_o",
	"ld<qualifier><space>v4.u8_b32_o",
	"ld<qualifier><space>v2.u16_o",
	"ld<qualifier><space>v4.u16_o",
	"ld<qualifier><space>v2.u16_b32_o",
	"ld<qualifier><space>v4.u16_b32_o",
	"ld<qualifier><space>v2.u32_o",
	"ld<qualifier><space>v4.u32_o",
	"ld<qualifier><space>v2.u64_o",
	"ld<qualifier><space>v2.f32_o",
	"ld<qualifier><space>v4.f32_o",
	"ld<qualifier><space>v2.f64_o",
	"ld<qualifier><space>v2.s8_a64_o",
	"ld<qualifier><space>v4.s8_a64_o",
	"ld<qualifier><space>v2.s8_b32_a64_o",
	"ld<qualifier><space>v4.s8_b32_a64_o",
	"ld<qualifier><space>v2.s16_a64_o",
	"ld<qualifier><space>v4.s16_a64_o",
	"ld<qualifier><space>v2.s16_b32_a64_o",
	"ld<qualifier><space>v4.s16_b32_a64_o",
	"ld<qualifier><space>v2.s32_a64_o",
	"ld<qualifier><space>v4.s32_a64_o",
	"ld<qualifier><space>v2.s64_a64_o",
	"ld<qualifier><space>v2.u8_a64_o",
	"ld<qualifier><space>v4.u8_a64_o",
	"ld<qualifier><space>v2.u8_b32_a64_o",
	"ld<qualifier><space>v4.u8_b32_a64_o",
	"ld<qualifier><space>v2.u16_a64_o",
	"ld<qualifier><space>v4.u16_a64_o",
	"ld<qualifier><space>v2.u16_b32_a64_o",
	"ld<qualifier><space>v4.u16_b32_a64_o",
	"ld<qualifier><space>v2.u32_a64_o",
	"ld<qualifier><space>v4.u32_a64_o",
	"ld<qualifier><space>v2.u64_a64_o",
	"ld<qualifier><space>v2.f32_a64_o",
	"ld<qualifier><space>v4.f32_a64_o",
	"ld<qualifier><space>v2.f64_a64_o",

	// st sym
	"st<qualifier><space>s8",
	"st<qualifier><space>s16",
	"st<qualifier><space>s32",
	"st<qualifier><space>s64",
	"st<qualifier><space>u8",
	"st<qualifier><space>u16",
	"st<qualifier><space>u32",
	"st<qualifier><space>u64",
	"st<qualifier><space>f32",
	"st<qualifier><space>f64",
	// st sym[offset]
	"st<qualifier><space>s8_o",
	"st<qualifier><space>s16_o",
	"st<qualifier><space>s32_o",
	"st<qualifier><space>s64_o",
	"st<qualifier><space>u8_o",
	"st<qualifier><space>u16_o",
	"st<qualifier><space>u32_o",
	"st<qualifier><space>u64_o",
	"st<qualifier><space>f32_o",
	"st<qualifier><space>f64_o",
	// st [reg+offset]
	"st<qualifier><space>s8_r",
	"st<qualifier><space>s16_r",
	"st<qualifier><space>s32_r",
	"st<qualifier><space>s64_r",
	"st<qualifier><space>u8_r",
	"st<qualifier><space>u16_r",
	"st<qualifier><space>u32_r",
	"st<qualifier><space>u64_r",
	"st<qualifier><space>f32_r",
	"st<qualifier><space>f64_r",
	// st small value into 32bit reg
	"st<qualifier><space>s8_b32",
	"st<qualifier><space>s16_b32",
	"st<qualifier><space>u8_b32",
	"st<qualifier><space>u16_b32",
	"st<qualifier><space>s8_b32_o",
	"st<qualifier><space>s16_b32_o",
	"st<qualifier><space>u8_b32_o",
	"st<qualifier><space>u16_b32_o",
	"st<qualifier><space>s8_b32_r",
	"st<qualifier><space>s16_b32_r",
	"st<qualifier><space>u8_b32_r",
	"st<qualifier><space>u16_b32_r",
	// 64bit address versions
	"st<qualifier><space>s8_a64",
	"st<qualifier><space>s16_a64",
	"st<qualifier><space>s32_a64",
	"st<qualifier><space>s64_a64",
	"st<qualifier><space>u8_a64",
	"st<qualifier><space>u16_a64",
	"st<qualifier><space>u32_a64",
	"st<qualifier><space>u64_a64",
	"st<qualifier><space>f32_a64",
	"st<qualifier><space>f64_a64",
	"st<qualifier><space>s8_a64_o",
	"st<qualifier><space>s16_a64_o",
	"st<qualifier><space>s32_a64_o",
	"st<qualifier><space>s64_a64_o",
	"st<qualifier><space>u8_a64_o",
	"st<qualifier><space>u16_a64_o",
	"st<qualifier><space>u32_a64_o",
	"st<qualifier><space>u64_a64_o",
	"st<qualifier><space>f32_a64_o",
	"st<qualifier><space>f64_a64_o",
	"st<qualifier><space>s8_a64_r",
	"st<qualifier><space>s16_a64_r",
	"st<qualifier><space>s32_a64_r",
	"st<qualifier><space>s64_a64_r",
	"st<qualifier><space>u8_a64_r",
	"st<qualifier><space>u16_a64_r",
	"st<qualifier><space>u32_a64_r",
	"st<qualifier><space>u64_a64_r",
	"st<qualifier><space>f32_a64_r",
	"st<qualifier><space>f64_a64_r",
	"st<qualifier><space>s8_b32_a64",
	"st<qualifier><space>s16_b32_a64",
	"st<qualifier><space>u8_b32_a64",
	"st<qualifier><space>u16_b32_a64",
	"st<qualifier><space>s8_b32_a64_o",
	"st<qualifier><space>s16_b32_a64_o",
	"st<qualifier><space>u8_b32_a64_o",
	"st<qualifier><space>u16_b32_a64_o",
	"st<qualifier><space>s8_b32_a64_r",
	"st<qualifier><space>s16_b32_a64_r",
	"st<qualifier><space>u8_b32_a64_r",
	"st<qualifier><space>u16_b32_a64_r",
	// for vector stores
	"st<qualifier><space>v2.s8_r",
	"st<qualifier><space>v4.s8_r",
	"st<qualifier><space>v2.s8_b32_r",
	"st<qualifier><space>v4.s8_b32_r",
	"st<qualifier><space>v2.s16_r",
	"st<qualifier><space>v4.s16_r",
	"st<qualifier><space>v2.s16_b32_r",
	"st<qualifier><space>v4.s16_b32_r",
	"st<qualifier><space>v2.s32_r",
	"st<qualifier><space>v4.s32_r",
	"st<qualifier><space>v2.s64_r",
	"st<qualifier><space>v2.u8_r",
	"st<qualifier><space>v4.u8_r",
	"st<qualifier><space>v2.u8_b32_r",
	"st<qualifier><space>v4.u8_b32_r",
	"st<qualifier><space>v2.u16_r",
	"st<qualifier><space>v4.u16_r",
	"st<qualifier><space>v2.u16_b32_r",
	"st<qualifier><space>v4.u16_b32_r",
	"st<qualifier><space>v2.u32_r",
	"st<qualifier><space>v4.u32_r",
	"st<qualifier><space>v2.u64_r",
	"st<qualifier><space>v2.f32_r",
	"st<qualifier><space>v4.f32_r",
	"st<qualifier><space>v2.f64_r",
	"st<qualifier><space>v2.s8_a64_r",
	"st<qualifier><space>v4.s8_a64_r",
	"st<qualifier><space>v2.s8_b32_a64_r",
	"st<qualifier><space>v4.s8_b32_a64_r",
	"st<qualifier><space>v2.s16_a64_r",
	"st<qualifier><space>v4.s16_a64_r",
	"st<qualifier><space>v2.s16_b32_a64_r",
	"st<qualifier><space>v4.s16_b32_a64_r",
	"st<qualifier><space>v2.s32_a64_r",
	"st<qualifier><space>v4.s32_a64_r",
	"st<qualifier><space>v2.s64_a64_r",
	"st<qualifier><space>v2.u8_a64_r",
	"st<qualifier><space>v4.u8_a64_r",
	"st<qualifier><space>v2.u8_b32_a64_r",
	"st<qualifier><space>v4.u8_b32_a64_r",
	"st<qualifier><space>v2.u16_a64_r",
	"st<qualifier><space>v4.u16_a64_r",
	"st<qualifier><space>v2.u16_b32_a64_r",
	"st<qualifier><space>v4.u16_b32_a64_r",
	"st<qualifier><space>v2.u32_a64_r",
	"st<qualifier><space>v4.u32_a64_r",
	"st<qualifier><space>v2.u64_a64_r",
	"st<qualifier><space>v2.f32_a64_r",
	"st<qualifier><space>v4.f32_a64_r",
	"st<qualifier><space>v2.f64_a64_r",
	"st<qualifier><space>v2.s8_o",
	"st<qualifier><space>v4.s8_o",
	"st<qualifier><space>v2.s8_b32_o",
	"st<qualifier><space>v4.s8_b32_o",
	"st<qualifier><space>v2.s16_o",
	"st<qualifier><space>v4.s16_o",
	"st<qualifier><space>v2.s16_b32_o",
	"st<qualifier><space>v4.s16_b32_o",
	"st<qualifier><space>v2.s32_o",
	"st<qualifier><space>v4.s32_o",
	"st<qualifier><space>v2.s64_o",
	"st<qualifier><space>v2.u8_o",
	"st<qualifier><space>v4.u8_o",
	"st<qualifier><space>v2.u8_b32_o",
	"st<qualifier><space>v4.u8_b32_o",
	"st<qualifier><space>v2.u16_o",
	"st<qualifier><space>v4.u16_o",
	"st<qualifier><space>v2.u16_b32_o",
	"st<qualifier><space>v4.u16_b32_o",
	"st<qualifier><space>v2.u32_o",
	"st<qualifier><space>v4.u32_o",
	"st<qualifier><space>v2.u64_o",
	"st<qualifier><space>v2.f32_o",
	"st<qualifier><space>v4.f32_o",
	"st<qualifier><space>v2.f64_o",
	"st<qualifier><space>v2.s8_a64_o",
	"st<qualifier><space>v4.s8_a64_o",
	"st<qualifier><space>v2.s8_b32_a64_o",
	"st<qualifier><space>v4.s8_b32_a64_o",
	"st<qualifier><space>v2.s16_a64_o",
	"st<qualifier><space>v4.s16_a64_o",
	"st<qualifier><space>v2.s16_b32_a64_o",
	"st<qualifier><space>v4.s16_b32_a64_o",
	"st<qualifier><space>v2.s32_a64_o",
	"st<qualifier><space>v4.s32_a64_o",
	"st<qualifier><space>v2.s64_a64_o",
	"st<qualifier><space>v2.u8_a64_o",
	"st<qualifier><space>v4.u8_a64_o",
	"st<qualifier><space>v2.u8_b32_a64_o",
	"st<qualifier><space>v4.u8_b32_a64_o",
	"st<qualifier><space>v2.u16_a64_o",
	"st<qualifier><space>v4.u16_a64_o",
	"st<qualifier><space>v2.u16_b32_a64_o",
	"st<qualifier><space>v4.u16_b32_a64_o",
	"st<qualifier><space>v2.u32_a64_o",
	"st<qualifier><space>v4.u32_a64_o",
	"st<qualifier><space>v2.u64_a64_o",
	"st<qualifier><space>v2.f32_a64_o",
	"st<qualifier><space>v4.f32_a64_o",
	"st<qualifier><space>v2.f64_a64_o",

	"cvt<sat>s8.s16",
	"cvt<sat>s8.s32",
	"cvt<sat>s8.s64",
	"cvt<sat>s8.u8",
	"cvt<sat>s8.u16",
	"cvt<sat>s8.u32",
	"cvt<sat>s8.u64",
	"cvt<fround><ftz><sat>s8.f32",
	"cvt<fround><sat>s8.f64",
	"cvt.s16.s8",
	"cvt<sat>s16.s32",
	"cvt<sat>s16.s64",
	"cvt.s16.u8",
	"cvt<sat>s16.u16",
	"cvt<sat>s16.u32",
	"cvt<sat>s16.u64",
	"cvt<fround><ftz><sat>s16.f32",
	"cvt<fround><sat>s16.f64",
	"cvt.s32.s8",
	"cvt.s32.s16",
	"cvt<sat>s32.s64",
	"cvt.s32.u8",
	"cvt.s32.u16",
	"cvt<sat>s32.u32",
	"cvt<sat>s32.u64",
	"cvt<fround><ftz><sat>s32.f32",
	"cvt<fround><sat>s32.f64",
	"cvt.s64.s8",
	"cvt.s64.s16",
	"cvt.s64.s32",
	"cvt.s64.u8",
	"cvt.s64.u16",
	"cvt.s64.u32",
	"cvt<sat>s64.u64",
	"cvt<fround><ftz><sat>s64.f32",
	"cvt<fround><sat>s64.f64",
	"cvt<sat>u8.s8",
	"cvt<sat>u8.s16",
	"cvt<sat>u8.s32",
	"cvt<sat>u8.s64",
	"cvt<sat>u8.u16",
	"cvt<sat>u8.u32",
	"cvt<sat>u8.u64",
	"cvt<fround><ftz><sat>u8.f32",
	"cvt<fround><sat>u8.f64",
	"cvt<sat>u16.s8",
	"cvt<sat>u16.s16",
	"cvt<sat>u16.s32",
	"cvt<sat>u16.s64",
	"cvt.u16.u8",
	"cvt<sat>u16.u32",
	"cvt<sat>u16.u64",
	"cvt<fround><ftz><sat>u16.f32",
	"cvt<fround><sat>u16.f64",
	"cvt<sat>u32.s8",
	"cvt<sat>u32.s16",
	"cvt<sat>u32.s32",
	"cvt<sat>u32.s64",
	"cvt.u32.u8",
	"cvt.u32.u16",
	"cvt<sat>u32.u64",
	"cvt<fround><ftz><sat>u32.f32",
	"cvt<fround><sat>u32.f64",
	"cvt<sat>u64.s8",
	"cvt<sat>u64.s16",
	"cvt<sat>u64.s32",
	"cvt<sat>u64.s64",
	"cvt.u64.u8",
	"cvt.u64.u16",
	"cvt.u64.u32",
	"cvt<fround><ftz><sat>u64.f32",
	"cvt<fround><sat>u64.f64",
	"cvt<fround><sat>f32.s8",
	"cvt<fround><sat>f32.s16",
	"cvt<fround><sat>f32.s32",
	"cvt<fround><sat>f32.s64",
	"cvt<fround><sat>f32.u8",
	"cvt<fround><sat>f32.u16",
	"cvt<fround><sat>f32.u32",
	"cvt<fround><sat>f32.u64",
	"cvt<fround><ftz><sat>f16.f32",
	"cvt<fround><ftz><sat>f32.f16",
	"cvt<fround><ftz><sat>f32.f64",
	"cvt<fround><sat>f64.s8",
	"cvt<fround><sat>f64.s16",
	"cvt<fround><sat>f64.s32",
	"cvt<fround><sat>f64.s64",
	"cvt<fround><sat>f64.u8",
	"cvt<fround><sat>f64.u16",
	"cvt<fround><sat>f64.u32",
	"cvt<fround><sat>f64.u64",
	"cvt<fround><ftz><sat>f64.f32",
	// cvts in 32-bit dest reg
	"cvt<sat>s8.s16_b32",
	"cvt<sat>s8.s32_b32",
	"cvt<sat>s8.u8_b32",
	"cvt<sat>s8.u16_b32",
	"cvt<sat>s8.u32_b32",
	"cvt.s16.s8_b32",
	"cvt<sat>s16.s32_b32",
	"cvt.s16.u8_b32",
	"cvt<sat>s16.u16_b32",
	"cvt<sat>s16.u32_b32",
	"cvt<sat>u8.s8_b32",
	"cvt<sat>u8.s16_b32",
	"cvt<sat>u8.s32_b32",
	"cvt<sat>u8.u16_b32",
	"cvt<sat>u8.u32_b32",
	"cvt<sat>u16.s8_b32",
	"cvt<sat>u16.s16_b32",
	"cvt<sat>u16.s32_b32",
	"cvt.u16.u8_b32",
	"cvt<sat>u16.u32_b32",
	// cvts in 64-bit dest reg
	"cvt<sat>s8.s16_b64",
	"cvt<sat>s8.s32_b64",
	"cvt<sat>s8.s64_b64",
	"cvt<sat>s8.u8_b64",
	"cvt<sat>s8.u16_b64",
	"cvt<sat>s8.u32_b64",
	"cvt<sat>s8.u64_b64",
	"cvt.s16.s8_b64",
	"cvt<sat>s16.s32_b64",
	"cvt<sat>s16.s64_b64",
	"cvt.s16.u8_b64",
	"cvt<sat>s16.u16_b64",
	"cvt<sat>s16.u32_b64",
	"cvt<sat>s16.u64_b64",
	"cvt.s32.s8_b64",
	"cvt.s32.s16_b64",
	"cvt<sat>s32.s64_b64",
	"cvt.s32.u8_b64",
	"cvt.s32.u16_b64",
	"cvt<sat>s32.u32_b64",
	"cvt<sat>s32.u64_b64",
	"cvt<sat>u8.s8_b64",
	"cvt<sat>u8.s16_b64",
	"cvt<sat>u8.s32_b64",
	"cvt<sat>u8.s64_b64",
	"cvt<sat>u8.u16_b64",
	"cvt<sat>u8.u32_b64",
	"cvt<sat>u8.u64_b64",
	"cvt<sat>u16.s8_b64",
	"cvt<sat>u16.s16_b64",
	"cvt<sat>u16.s32_b64",
	"cvt<sat>u16.s64_b64",
	"cvt.u16.u8_b64",
	"cvt<sat>u16.u32_b64",
	"cvt<sat>u16.u64_b64",
	"cvt<sat>u32.s8_b64",
	"cvt<sat>u32.s16_b64",
	"cvt<sat>u32.s32_b64",
	"cvt<sat>u32.s64_b64",
	"cvt.u32.u8_b64",
	"cvt.u32.u16_b64",
	"cvt<sat>u32.u64_b64",
	// cvts in 32bit reg
	"cvt<fround><ftz><sat>s8.f32_b32",
	"cvt<fround><sat>s8.f64_b32",
	"cvt<fround><ftz><sat>s16.f32_b32",
	"cvt<fround><sat>s16.f64_b32",
	"cvt<fround><ftz><sat>u8.f32_b32",
	"cvt<fround><sat>u8.f64_b32",
	"cvt<fround><ftz><sat>u16.f32_b32",
	"cvt<fround><sat>u16.f64_b32",
	// cvts in 64bit reg
	"cvt<fround><ftz><sat>s8.f32_b64",
	"cvt<fround><sat>s8.f64_b64",
	"cvt<fround><ftz><sat>s16.f32_b64",
	"cvt<fround><sat>s16.f64_b64",
	"cvt<fround><ftz><sat>s32.f32_b64",
	"cvt<fround><sat>s32.f64_b64",
	"cvt<fround><ftz><sat>u8.f32_b64",
	"cvt<fround><sat>u8.f64_b64",
	"cvt<fround><ftz><sat>u16.f32_b64",
	"cvt<fround><sat>u16.f64_b64",
	"cvt<fround><ftz><sat>u32.f32_b64",
	"cvt<fround><sat>u32.f64_b64",
	"cvt<fround><ftz><sat>f32.f32",
	"cvt<fround><sat>f64.f64",
        // cvta only accepts global/shared/local but use existing space enum
	"cvta<space>u32",
	"cvta<space>u64",
	"cvta<space>u32_a",
	"cvta<space>u64_a",
	"cvta<space>u32_ao",
	"cvta<space>u64_ao",
	"cvta.to<space>u32",
	"cvta.to<space>u64",
	"sad.s32",
	"sad.u32",
	"call",
	"call.uni",
	"bra",
	"bra.uni",
	"bra_p",
	"bra.uni_p",
	// !p form
	"bra_np", 
	"bra.uni_np",
	"exit",
	"ret",
	"nop",
	"bar.sync",
	"membar.gl",
	"membar.cta",
	"membar.sys",
	"trap",
	"brkpt",
	// initially no intrinsics for 16 or 64-bit int,
	// but ptx supports them and may add them as intrinsics later
	"atom<space>add.s32",
	"atom<space>add.s64",
	"atom<space>add.u32",
	"atom<space>add.u64",
	"atom<space>add.f32",
	"atom<space>add.f64",
	"atom<space>min.s32",
	"atom<space>min.u32",
	"atom<space>min.f32",
	"atom<space>max.s32",
	"atom<space>max.u32",
	"atom<space>max.f32",
	"atom<space>exch.b32",
	"atom<space>exch.b64",
	"atom<space>exch.b32_f",
	"atom<space>exch.b64_f",
	"atom<space>and.b32",
	"atom<space>or.b32",
	"atom<space>xor.b32",
	"atom<space>inc.u32",
	"atom<space>dec.u32",
	"atom<space>cas.b32",
	"atom<space>cas.b64",
	"atom<space>cas.b32_f",
	"atom<space>cas.b64_f",
	"atom<space>add.s32_a64",
	"atom<space>add.s64_a64",
	"atom<space>add.u32_a64",
	"atom<space>add.u64_a64",
	"atom<space>add.f32_a64",
	"atom<space>add.f64_a64",
	"atom<space>min.s32_a64",
	"atom<space>min.u32_a64",
	"atom<space>min.f32_a64",
	"atom<space>max.s32_a64",
	"atom<space>max.u32_a64",
	"atom<space>max.f32_a64",
	"atom<space>exch.b32_a64",
	"atom<space>exch.b64_a64",
	"atom<space>exch.b32_a64_f",
	"atom<space>exch.b64_a64_f",
	"atom<space>and.b32_a64",
	"atom<space>or.b32_a64",
	"atom<space>xor.b32_a64",
	"atom<space>inc.u32_a64",
	"atom<space>dec.u32_a64",
	"atom<space>cas.b32_a64",
	"atom<space>cas.b64_a64",
	"atom<space>cas.b32_a64_f",
	"atom<space>cas.b64_a64_f",
	// VOTE
	"vote.all.pred",
	"vote.any.pred",
	"vote.uni.pred",
	"vote.all.pred_not",
	"vote.any.pred_not",
	// VOTE ballot form
	"vote.ballot.b32",
	"vote.ballot.b32_not",

	// Bar.red
	"bar.red.popc.u32",
	"bar.red.and.pred",
	"bar.red.or.pred",
	"bar.red.popc.u32_not",
	"bar.red.and.pred_not",
	"bar.red.or.pred_not",

	// PMEVENT
	"pmevent",

        // CLZ, POPC
        "clz.b32",
        "clz.b64",
        "popc.b32",
        "popc.b64",
        "prmt.b32",
        
	// ops used internally by compiler:
	"noop",
	"asm",
	"intrncall",
	"spadjust",
	"begin_pregtn",
	"end_pregtn",
      NULL);

  return 0;    
}
