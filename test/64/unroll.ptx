	.version 1.1
	.target compute_10, map_f64_to_f32
	// compiled with /home/mmurphy/sw/compiler/gpgpu/open64/src/targia3264_nvisa/lib//be
	// nvopencc built on 2008-02-15

	.reg .u32 %ra<17>;
	.reg .u64 %rda<17>;
	.reg .f32 %fa<17>;
	.reg .f64 %fda<17>;
	.reg .u32 %rv<5>;
	.reg .u64 %rdv<5>;
	.reg .f32 %fv<5>;
	.reg .f64 %fdv<5>;


	//-----------------------------------------------------------
	// Compiling unroll.i (/tmp/ccBI#.jKPsSA)
	//-----------------------------------------------------------

	//-----------------------------------------------------------
	// Options:
	//-----------------------------------------------------------
	//  Target:ptx, ISA:compute_10, Endian:little, Pointer Size:64
	//  -O3	(Optimization level)
	//  -g0	(Debug level)
	//  -m2	(Report advisories)
	//-----------------------------------------------------------

	.file	1	"unroll.i"

	.global .s32 sum;

	.entry test0
	{
	.reg .u32 %r<5>;
	.loc	1	4	0
$LBB1_test0:
	.loc	1	7	0
	ld.global.s32 	%r1, [sum];    	// id:14 sum+0x0
	add.s32 	%r2, %r1, 2;         	// 
	add.s32 	%r2, %r2, 6;         	// 
	add.s32 	%r2, %r2, 12;        	// 
	add.s32 	%r2, %r2, 20;        	// 
	add.s32 	%r2, %r2, 30;        	// 
	add.s32 	%r3, %r2, 98;        	// 
	st.global.s32 	[sum], %r3;    	// id:14 sum+0x0
	.loc	1	9	0
	exit;                         	// 
$LDWend_test0:
	} // test0

	.entry test1
	{
	.reg .u32 %r<5>;
	.loc	1	12	0
$LBB1_test1:
	.loc	1	15	0
	ld.global.s32 	%r1, [sum];    	// id:14 sum+0x0
	add.s32 	%r2, %r1, 2;         	// 
	add.s32 	%r2, %r2, 6;         	// 
	add.s32 	%r2, %r2, 12;        	// 
	add.s32 	%r2, %r2, 20;        	// 
	add.s32 	%r2, %r2, 30;        	// 
	add.s32 	%r3, %r2, 98;        	// 
	st.global.s32 	[sum], %r3;    	// id:14 sum+0x0
	.loc	1	17	0
	exit;                         	// 
$LDWend_test1:
	} // test1

	.entry test2
	{
	.reg .u32 %r<7>;
	.reg .pred %p<3>;
	.loc	1	20	0
$LBB1_test2:
	.loc	1	24	0
	ld.global.s32 	%r1, [sum];    	// id:14 sum+0x0
	mov.s32 	%r2, 0;              	// 
$Lt_2_7:
 //<loop> Loop body line 24, nesting depth: 1, iterations: 8
	.loc	1	23	0
	mul.lo.s32 	%r3, %r2, %r2;    	// 
	add.s32 	%r4, %r2, %r3;       	// 
	add.s32 	%r1, %r1, %r4;       	// 
	add.s32 	%r2, %r2, 1;         	// 
	mov.s32 	%r5, 8;              	// 
	setp.ne.s32 	%p1, %r2, %r5;   	// 
	@%p1 bra 	$Lt_2_7;            	// 
	st.global.s32 	[sum], %r1;    	// id:14 sum+0x0
	.loc	1	25	0
	exit;                         	// 
$LDWend_test2:
	} // test2

	.entry test3
	{
	.reg .u16 %rh<4>;
	.reg .u32 %r<9>;
	.reg .pred %p<3>;
	.loc	1	28	0
$LBB1_test3:
	.loc	1	24	0
	mov.s16 	%rh1, 1;             	// 
	ld.global.s32 	%r1, [sum];    	// id:14 sum+0x0
	mov.s32 	%r2, 0;              	// 
$Lt_3_7:
 //<loop> Loop body line 24, nesting depth: 1, iterations: 4
	.loc	1	31	0
	mul.lo.s32 	%r3, %r2, %r2;    	// 
	add.s32 	%r4, %r2, %r3;       	// 
	add.s32 	%r1, %r1, %r4;       	// 
	mul.wide.s16 	%r5, %rh1, %rh1;	// 
	add.s32 	%r6, %r2, %r5;       	// 
	add.s32 	%r7, %r1, %r6;       	// 
	add.s32 	%r1, %r7, 1;         	// 
	add.s32 	%r2, %r2, 2;         	// 
	add.s16 	%rh1, %rh1, 2;       	// 
	mov.s16 	%rh2, 9;             	// 
	setp.ne.s16 	%p1, %rh1, %rh2; 	// 
	@%p1 bra 	$Lt_3_7;            	// 
	st.global.s32 	[sum], %r1;    	// id:14 sum+0x0
	.loc	1	33	0
	exit;                         	// 
$LDWend_test3:
	} // test3

	.entry test4
	{
	.reg .u32 %r<5>;
	.loc	1	36	0
$LBB1_test4:
	.loc	1	39	0
	ld.global.s32 	%r1, [sum];    	// id:14 sum+0x0
	add.s32 	%r2, %r1, 72;        	// 
	add.s32 	%r2, %r2, 30;        	// 
	add.s32 	%r3, %r2, 6;         	// 
	st.global.s32 	[sum], %r3;    	// id:14 sum+0x0
	.loc	1	41	0
	exit;                         	// 
$LDWend_test4:
	} // test4

